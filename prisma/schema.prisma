// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL") // uses a direct connection
}

model Business {
  id          String   @id @default(cuid())
  name        String
  address     String
  phone       String?
  website     String?
  latitude    Float
  longitude   Float
  industry    String
  keywords    String[]
  reports     Report[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("businesses")
}

model Report {
  id              String       @id @default(cuid())
  businessId      String
  business        Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  reportData      Json
  htmlContent     String?
  pdfUrl          String?
  generatedAt     DateTime     @default(now())
  searchCost      Float        @default(0)
  totalSearches   Int          @default(0)
  competitors     Competitor[]
  searchLogs      SearchLog[]
  
  // Report metrics
  visibilityScore    Float?
  marketCoverage     Float?
  revenueImpact      Float?
  competitorCount    Int       @default(0)
  
  @@map("reports")
}

model Competitor {
  id           String  @id @default(cuid())
  reportId     String
  report       Report  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  name         String
  phone        String?
  address      String?
  rating       Float   @default(0)
  reviews      Int     @default(0)
  rank         Int
  marketShare  Float   @default(0)
  revenue      Float   @default(0)
  website      String?
  placeId      String?
  zone         String
  
  // Competitive metrics
  dominanceScore     Float @default(0)
  estimatedCalls     Int   @default(0)
  geographicCoverage Json? // Array of zones where this competitor appears
  
  @@map("competitors")
}

model SearchLog {
  id          String   @id @default(cuid())
  reportId    String?
  report      Report?  @relation(fields: [reportId], references: [id], onDelete: SetNull)
  query       String
  location    String
  gridPoint   Json     // Store lat/lng/zone info
  cost        Float
  timestamp   DateTime @default(now())
  results     Json
  success     Boolean  @default(true)
  errorMsg    String?
  
  @@map("search_logs")
}

model CostTracking {
  id               String   @id @default(cuid())
  date             DateTime @default(now())
  totalSearches    Int      @default(0)
  totalCost        Float    @default(0)
  reportsGenerated Int      @default(0)
  avgCostPerReport Float    @default(0)
  dailyBudget      Float    @default(100)
  budgetUsed       Float    @default(0)
  
  @@map("cost_tracking")
}
